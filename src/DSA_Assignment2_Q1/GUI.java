/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package DSA_Assignment2_Q1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.PrintStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author Jakob
 */
public class GUI extends javax.swing.JFrame {
    
    //initialises variables
    BinaryTree<Student> SortedByGrade;
    BinaryTree<Student> SortedByName;
    BinaryTree<Student> CurrentTree;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        save = new javax.swing.JButton();
        load = new javax.swing.JButton();
        Order = new javax.swing.JToggleButton();
        SortedBy = new javax.swing.JToggleButton();
        SearchField = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        Results = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        save.setText("Save");
        save.setEnabled(false);
        save.setName("save"); // NOI18N
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        load.setText("Load");
        load.setName(""); // NOI18N
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        Order.setText("Decending Order");
        Order.setEnabled(false);
        Order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderActionPerformed(evt);
            }
        });

        SortedBy.setText("Sort by grade");
        SortedBy.setEnabled(false);
        SortedBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortedByActionPerformed(evt);
            }
        });

        SearchField.setEnabled(false);

        Search.setText("Search");
        Search.setEnabled(false);
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        Results.setText("Results will display here");
        Results.setEnabled(false);
        Results.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResultsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(load))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Results, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(SearchField)
                                .addGap(18, 18, 18)
                                .addComponent(Search)))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(SortedBy)
                .addGap(22, 22, 22)
                .addComponent(Order)
                .addGap(18, 18, 18)
                .addComponent(save)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Order)
                    .addComponent(SortedBy)
                    .addComponent(save))
                .addGap(55, 55, 55)
                .addComponent(load)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search))
                .addGap(39, 39, 39)
                .addComponent(Results, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //This method saves the binary tree to the file called output.txt
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed

        try {
            //sets the system.out print stream to the text file
            PrintStream out = new PrintStream(new FileOutputStream("output.txt"));
            System.setOut(out);
            //calls the traversal method and prints all records to the file
            CurrentTree.traversal();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        

    }//GEN-LAST:event_saveActionPerformed

    //methods for the load button
    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        //gets the user to select a file to open
        JFileChooser FileChooser = new JFileChooser(new File("."));
        int stateImageFileChooser = FileChooser.showOpenDialog(null);
        //once the file has been picked
        if (stateImageFileChooser == JFileChooser.APPROVE_OPTION) {
            
            try {
                //initialises both binary trees 
                SortedByGrade = new BinaryTree<>();
                SortedByName = new BinaryTree<>();
                
                //gets the file name that the user selected 
                String fileName = FileChooser.getSelectedFile().getPath();
                
                //opens the file in the reader
                BufferedReader br = new BufferedReader(new FileReader(fileName));
                
                //reads the first line
                String line = br.readLine();
                
                //loop while the line that has been read is not empty
                while (line != null) {
                    
                    //splits the line into two strings around the comma
                    String[] split = line.split(", ");
                    
                    //creates the student variable and sets the key to the grade then adds to the sorted by grade tree
                    Student<Integer> student = new Student<>(split[0], Integer.parseInt(split[1]));
                    student.setKey(Integer.parseInt(split[1]));
                    SortedByGrade.addNode(student);
                    
                    //creates the student variable and the sets the key to the name and then adds it to the sorted by name tree
                    Student<String> student2 = new Student<>(split[0], Integer.parseInt(split[1]));
                    student2.setKey(split[0]);
                    SortedByName.addNode(student2);
                    
                    //reads next line
                    line = br.readLine();
                }
                //sets the current tree to sorted by name
                CurrentTree = SortedByName;
                
                //closes the reader
                br.close();
                
                //enables all of the buttons and text boxes besides the load button
                Order.setEnabled(true);
                Results.setEnabled(true);
                Search.setEnabled(true);
                SearchField.setEnabled(true);
                SortedBy.setEnabled(true);
                save.setEnabled(true);
                
            } catch (Exception E) {
                System.out.println("File Read Error");
            }
        }
    }//GEN-LAST:event_loadActionPerformed

    //method for the change order button
    private void OrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderActionPerformed
        //checks if it is currently ascending order
        if (Order.getText().equals("Decending Order")) {
            //sets the current tree to be decending
            Order.setText("Ascending order");
            this.CurrentTree.reverseOrder();
        } else {
            //sets the current tree to be ascending
            Order.setText("Decending Order");
            this.CurrentTree.reverseOrder();
        }

    }//GEN-LAST:event_OrderActionPerformed
    
    //method for the sorted by action button
    private void SortedByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortedByActionPerformed
        //checks if the tree is sorted by grade
        if (SortedBy.getText().equals("Sort by name")) {
            //sets the tree to sorted by name
            SortedBy.setText("Sort by grade");
            this.CurrentTree = SortedByName;
            
        } else {
            //sets the tree to be sorted by grade
            SortedBy.setText("Sort by name");
            this.CurrentTree = SortedByGrade;
        }
    }//GEN-LAST:event_SortedByActionPerformed

    private void ResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResultsActionPerformed
        
    }//GEN-LAST:event_ResultsActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        //checks if the tree is currently sorted by grade
        if (CurrentTree == SortedByGrade) {
            try {
                //converts the input to integer
                int grade = Integer.parseInt(SearchField.getText());
                //makes student with that grade
                Student<Integer> newStudent = new Student<>("null", grade);
                //sets the key to student mark
                newStudent.setKey(newStudent.mark);
                //find the node with the same grade
                Student node = CurrentTree.findNode(newStudent);
                
                //checks if there was that node
                if (node == null) {
                    Results.setText("Could not find record of that grade ");
                    //displays record if found 
                } else {
                    Results.setText("Record found: " + node.toString());
                }
            } catch (Exception E) {
                Results.setText("Please enter a valid Grade");
            }
            //if the current tree equals sorted by name searched the sorted by name tree folowing the same process
        } else if (CurrentTree == SortedByName) {
            Student<String> newStudent = new Student<>(SearchField.getText(), 0);
            newStudent.setKey(newStudent.name);
            Student node = CurrentTree.findNode(newStudent);
            if (node == null) {
                Results.setText("Could not find record of that name ");
            } else {
                Results.setText("Record found: " + node.toString());
            }
            
        }        

    }//GEN-LAST:event_SearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
                

            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton Order;
    private javax.swing.JTextField Results;
    private javax.swing.JButton Search;
    private javax.swing.JTextField SearchField;
    private javax.swing.JToggleButton SortedBy;
    private javax.swing.JButton load;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables
}
